
            message = 'import React, { useState } from \'react\';\nimport { View, Text, TextInput, Button, StyleSheet, Alert } from \'react-native\';\n\nfunction OtpScreen({ route, navigation }) {\n    const { email, new_user } = route.params;\n    const [otp, setOtp] = useState(\'\');\n\n    const handleOtpChange = (text) => {\n        const numericText = text.replace(/[^0-9]/g, \'\');\n        setOtp(numericText);\n    };\n\n    const handleOtpSubmit = async () => {\n        try {\n            const response = await fetch(\'http://192.168.1.4:65535/verify_otp\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\',\n                },\n                body: JSON.stringify({ email, otp }),\n            });\n\n            const data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message);\n            }\n\n            // Resetting the navigation stack and directing the user as per their status\n            if (new_user) {\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: \'CompleteProfile\', params: { email } }],\n                });\n            } else {\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: \'MultiChills\' }],\n                });\n            }\n\n        } catch (error) {\n            Alert.alert(\'Verification Failed\', error.message);\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <Text>OTP</Text>\n            <TextInput\n                style={styles.input}\n                onChangeText={handleOtpChange}\n                value={otp}\n                placeholder="Enter OTP"\n                keyboardType="numeric" // Set the keyboard type to numeric\n            />\n            <Button title="Submit" onPress={handleOtpSubmit} />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \'center\',\n        alignItems: \'center\',\n        padding: 20,\n    },\n    input: {\n        width: \'100%\',\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default OtpScreen;\n\nWrite a React Native component for the following screen:\n1. File Name: CompleteProfile.js\n2. Input Fields:\n2.0 email - string - non-editable (will be received as props from OtpScreen.js)\n2.1 Upload Profile Photo - Select from gallery field, single select - croppable\n2.2 Username - String\n2.3 First Name - String\n2.4 Last Name - String\n2.5 Gender - Dropdown with (Male, Female, Non-Binary)\n2.6 Date of Birth - Calendar dropdown\n2.7 About yourself - String\n2.8 Where do you stay?  - String\n\nAlso, modify the OtpScreen.js file so that email is being passed as props to the CompleteProfile screen.'

            response = 'First, let\'s create the `CompleteProfile.js` file, a React Native component based on the specifications you provided. We\'ll also need a few additional libraries to handle image selection and cropping, and date picking.\n\n```jsx\n// File: CompleteProfile.js\nimport React, { useState } from \'react\';\nimport { View, Text, TextInput, Button, StyleSheet, TouchableOpacity, Alert } from \'react-native\';\nimport ImagePicker from \'react-native-image-crop-picker\';\nimport { Picker } from \'@react-native-picker/picker\';\nimport DateTimePicker from \'@react-native-community/datetimepicker\';\n\nfunction CompleteProfile({ route }) {\n    const { email } = route.params;\n    const [profilePhoto, setProfilePhoto] = useState(null);\n    const [username, setUsername] = useState(\'\');\n    const [firstName, setFirstName] = useState(\'\');\n    const [lastName, setLastName] = useState(\'\');\n    const [gender, setGender] = useState(\'Male\');\n    const [dob, setDob] = useState(new Date());\n    const [about, setAbout] = useState(\'\');\n    const [location, setLocation] = useState(\'\');\n\n    const onSelectImage = async () => {\n        try {\n            const image = await ImagePicker.openPicker({\n                width: 300,\n                height: 300,\n                cropping: true,\n            });\n            setProfilePhoto(image.path);\n        } catch (error) {\n            Alert.alert(\'Failed to pick an image\');\n        }\n    };\n\n    const onSetDob = (event, selectedDate) => {\n        const currentDate = selectedDate || dob;\n        setDob(currentDate);\n    };\n\n    const handleSubmit = () => {\n        // Submit the data to API or store locally\n        Alert.alert(\'Profile Complete\', `Thank you ${firstName}!`);\n    };\n\n    return (\n        <View style={styles.container}>\n            <Text>Email: {email}</Text>\n            <TouchableOpacity onPress={onSelectImage}>\n                <Text>{profilePhoto ? `Change Profile Photo` : `Upload Profile Photo`}</Text>\n            </TouchableOpacity>\n            <TextInput style={styles.input} value={username} onChangeText={setUsername} placeholder="Username" />\n            <TextInput style={styles.input} value={firstName} onChangeText={setFirstName} placeholder="First Name" />\n            <TextInput style={styles.input} value={lastName} onChangeText={setLastName} placeholder="Last Name" />\n            <Picker\n                selectedValue={gender}\n                onValueChange={(itemValue, itemIndex) => setGender(itemValue)}\n                style={styles.input}>\n                <Picker.Item label="Male" value="Male" />\n                <Picker.Item label="Female" value="Female" />\n                <Picker.Item label="Non-Binary" value="Non-Binary" />\n            </Picker>\n            <DateTimePicker\n                style={styles.input}\n                value={dob}\n                mode="date"\n                display="default"\n                onChange={onSetDob}\n            />\n            <TextInput style={styles.input} value={about} onChangeText={setAbout} placeholder="About yourself" multiline />\n            <TextInput style={styles.input} value={location} onChangeText={setLocation} placeholder="Where do you stay?" />\n            <Button title="Submit" onPress={handleSubmit} />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        padding: 20,\n    },\n    input: {\n        width: \'100%\',\n        height: 40,\n        marginVertical: 10,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default CompleteProfile;\n```\n\n### Modifications to `OtpScreen.js`:\nMake sure that the `email` in the navigation reset parameters is passed correctly to the `CompleteProfile` screen:\n\n```jsx\nnavigation.reset({\n    index: 0,\n    routes: [{ name: \'CompleteProfile\', params: { email } }],\n});\n```\n\nThis code snippet ensures that when a new user successfully verifies their OTP, they are navigated to the `CompleteProfile` screen with the `email` parameter from the `OtpScreen` passed properly.'
            