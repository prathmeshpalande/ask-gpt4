
            message = 'import React, { useState } from \'react\';\nimport { View, TextInput, Button, StyleSheet, Alert } from \'react-native\';\nimport axios from \'axios\';\n\nfunction LoginScreen({ navigation }) {\n    const [email, setEmail] = useState(\'\');\n    const [loading, setLoading] = useState(false);\n\n    const isValidEmail = (email) => {\n        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return regex.test(email);\n    };\n\n    const handleLogin = async () => {\n        console.log(email);\n        if (!email) {\n            console.log(!email);\n            Alert.alert("Validation Error", "Email field cannot be empty.");\n            return;\n        }\n\n        if (!isValidEmail(email)) {\n            console.log(!isValidEmail(email));\n            Alert.alert("Validation Error", "Please enter a valid email address.");\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const response = await axios.post(\'https://example.com/api/login\', { email });\n\n            if (response.status === 200) {\n                navigation.navigate(\'OTP\');\n            } else {\n                setLoading(false);\n                Alert.alert("Login Error", "Failed to log in. Please try again.");\n            }\n        } catch (error) {\n            setLoading(false);\n            Alert.alert("API Error", "An error occurred while trying to log in.");\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.inputContainer}>\n                <TextInput\n                    style={styles.input}\n                    placeholder="Email"\n                    value={email}\n                    onChangeText={setEmail}\n                    keyboardType="email-address"\n                    autoCapitalize="none"\n                />\n                <Button title={loading ? "Logging in..." : "Login"} onPress={handleLogin} disabled={loading} />\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \'center\',\n        alignItems: \'center\',\n        padding: 20,\n    },\n    inputContainer: {\n        width: \'100%\',\n        maxWidth: 400,\n    },\n    input: {\n        marginBottom: 20,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default LoginScreen;\n\n\nI don\'t want to use axios'

            response = 'If you prefer not to use `axios` for making HTTP requests in your React Native application, you can use the built-in `fetch` API, which is also widely used and does not require any additional dependencies. Below is the revised `LoginScreen` component using the `fetch` API instead of `axios`.\n\n```javascript\nimport React, { useState } from \'react\';\nimport { View, TextInput, Button, StyleSheet, Alert } from \'react-native\';\n\nfunction LoginScreen({ navigation }) {\n    const [email, setEmail] = useState(\'\');\n    const [loading, setLoading] = useState(false);\n\n    const isValidEmail = (email) => {\n        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return regex.test(email);\n    };\n\n    const handleLogin = async () => {\n        console.log(email);\n        if (!email) {\n            console.log(!email);\n            Alert.alert("Validation Error", "Email field cannot be empty.");\n            return;\n        }\n\n        if (!isValidEmail(email)) {\n            console.log(!isValidEmail(email));\n            Alert.alert("Validation Error", "Please enter a valid email address.");\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const response = await fetch(\'https://example.com/api/login\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\',\n                },\n                body: JSON.stringify({ email }),\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                navigation.navigate(\'OTP\');\n            } else {\n                setLoading(false);\n                Alert.alert("Login Error", "Failed to log in. Please try again.");\n            }\n        } catch (error) {\n            setLoading(false);\n            Alert.alert("API Error", "An error occurred while trying to log in.");\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.inputContainer}>\n                <TextInput\n                    style={styles.input}\n                    placeholder="Email"\n                    value={email}\n                    onChangeText={setEmail}\n                    keyboardType="email-address"\n                    autoCapitalize="none"\n                />\n                <Button title={loading ? "Logging in..." : "Login"} onPress={handleLogin} disabled={loading} />\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \'center\',\n        alignItems: \'center\',\n        padding: 20,\n    },\n    inputContainer: {\n        width: \'100%\',\n        maxWidth: 400,\n    },\n    input: {\n        marginBottom: 20,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default LoginScreen;\n```\n\n### Key Changes\n1. **HTTP Request**: The `axios.post` method is replaced with the `fetch` function. The `fetch` function is called with the URL and an options object specifying the HTTP method, headers, and body.\n2. **Handling Responses**: The response handling is slightly different with `fetch`. It doesn\'t automatically throw an error on HTTP failure statuses. Instead, it has an `ok` property (true if the HTTP status code is in the 200–299 range). You should check `res.ok` to handle HTTP errors.\n3. **Conversion to JSON**: The response is parsed as JSON with `response.json()`. This is similar to what axios provides by default.\n4. **Error Handling**: Error handling remains similar but it\'s important to note that network errors and parsing errors can both trigger the catch block.'
            