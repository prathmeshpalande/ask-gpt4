
            message = 'Write a POST API in FastAPI to login that:\n1. takes in an email as request body input\n2. generates a random 4 digit number and stores it in the User database table that has only two columns: email and OTP\n3. if the user already exists, it overwrites the OTP\n4. if it is a new user, it creates a new user and writes the otp\nAlso, use SQLAlchemy and an SQLite file to create the database connection and ORM for the User table.\n\nMy LoginScreen.js React Native code is as follows for your reference of how I am calling this API from the frontend:\nimport React, { useState } from \'react\';\nimport { View, Text, TextInput, Button, StyleSheet, Alert, ActivityIndicator } from \'react-native\';\n\nfunction LoginScreen({ navigation }) {\n    const [email, setEmail] = useState(\'\');\n    const [loading, setLoading] = useState(false);  // State to handle loading\n\n    const isValidEmail = (email) => {\n        return true; // Simplified for example purposes, add your regex back here\n    };\n\n    const handleLogin = async () => {\n        if (!email.trim()) {\n            Alert.alert(\'Validation Failed\', \'Email address is required.\');\n            return;\n        }\n\n        if (!isValidEmail(email)) {\n            Alert.alert(\'Validation Failed\', \'Please enter a valid email address.\');\n            return;\n        }\n\n        setLoading(true); // Set loading to true before the API call\n        try {\n            const response = await fetch(\'http://192.168.1.4:65535/login\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\',\n                },\n                body: JSON.stringify({ email }),\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                navigation.navigate(\'OtpScreen\', { email });\n            } else {\n                throw new Error(data.message || "Unable to login");\n            }\n        } catch (error) {\n            Alert.alert(\'Login Failed\', error.message);\n        } finally {\n            setLoading(false); // Set loading to false after the API call\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <Text>Welcome to MultiChill</Text>\n            <TextInput\n                style={styles.input}\n                onChangeText={setEmail}\n                value={email}\n                placeholder="Enter your email"\n                keyboardType="email-address"\n                autoCapitalize="none"\n            />\n            <Button\n                title={loading ? \'Logging In...\' : \'Login\'}\n                onPress={handleLogin}\n                disabled={loading} // Disable button when loading\n            />\n            {loading && <ActivityIndicator size="small" color="#0000ff" />}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \'center\',\n        alignItems: \'center\',\n        padding: 20,\n    },\n    input: {\n        width: \'100%\',\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default LoginScreen;'

            response = 'Here\'s how you can setup your FastAPI service using SQLAlchemy to manage an SQLite database for your described user login flow. This script will also create your User database table using an ORM model and will handle the login endpoint.\n\n### Step 1: Install Required Libraries\n\nYou\'ll need `fastapi`, `uvicorn` for running your server, and `sqlalchemy` for ORM. Install them using pip:\n\n```bash\npip install fastapi uvicorn sqlalchemy\n```\n\n### Step 2: Define the FastAPI Application and Database Setup\n\nCreate a new file named `main.py`. This file will contain the API server configuration, database configuration, and route definitions.\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom sqlalchemy import create_engine, Column, String, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nimport random\n\n# Database & ORM setup\nDATABASE_URL = "sqlite:///./testdatabase.db"\nengine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# User Model\nclass User(Base):\n    __tablename__ = \'users\'\n    email = Column(String, primary_key=True, index=True)\n    otp = Column(Integer)\n\n# Pydantic model for request body validation\nclass UserLogin(BaseModel):\n    email: str\n\n# App initialization\napp = FastAPI()\n\n# Create DB tables\nBase.metadata.create_all(bind=engine)\n\n# Dependency to get DB session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.post("/login")\nasync def login(user_login: UserLogin, db=next(get_db())):\n    try:\n        otp = random.randint(1000, 9999)\n        user = db.query(User).filter(User.email == user_login.email).first()\n        if user:\n            user.otp = otp\n        else:\n            user = User(email=user_login.email, otp=otp)\n            db.add(user)\n        db.commit()\n    except Exception as e:\n        db.rollback()\n        raise HTTPException(status_code=500, detail=str(e))\n    return {"message": "OTP updated/generate successfully"}\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n```\n\n### Explanation:\n1. **Database and ORM Setup**: We\'re using SQLite here, but feel free to adjust to a different SQL database. The `User` class is our SQLAlchemy ORM model which maps to a `users` table in the database.\n2. **UserLogin Model**: This Pydantic model is used for data validation of the incoming requests.\n3. **Login endpoint**: This endpoint generates a new OTP, updates the existing user or adds a new user accordingly, and commits the changes to the database.\n\n### Step 3: Running Your Server\n\nRun your server using the following command:\n```bash\nuvicorn main:app --reload\n```\n\nThis will start your FastAPI application on `localhost` with port `8000`. Given the local network address you used in your React Native code (`192.168.1.4:65535`), ensure that your server is accessible over the network. You might need to run it from a device within the same network or adjust its host and port appropriately.\n\nThis setup will allow your React Native frontend to interact with the FastAPI backend by sending login requests and handling OTPs.'
            