
            message = 'import React, { useState } from \'react\';\nimport { View, Text, TextInput, Button, StyleSheet, Alert } from \'react-native\';\n\nfunction OtpScreen({ route, navigation }) {\n    const { email, new_user } = route.params;\n    const [otp, setOtp] = useState(\'\');\n\n    const handleOtpChange = (text) => {\n        const numericText = text.replace(/[^0-9]/g, \'\');\n        setOtp(numericText);\n    };\n\n    const handleOtpSubmit = async () => {\n        try {\n            const response = await fetch(\'http://192.168.1.4:65535/verify_otp\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\',\n                },\n                body: JSON.stringify({ email, otp }),\n            });\n\n            const data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message);\n            }\n\n            // Resetting the navigation stack and directing the user as per their status\n            if (new_user) {\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: \'CompleteProfile\', params: { email } }],\n                });\n            } else {\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: \'MultiChills\' }],\n                });\n            }\n\n        } catch (error) {\n            Alert.alert(\'Verification Failed\', error.message);\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <Text>OTP</Text>\n            <TextInput\n                style={styles.input}\n                onChangeText={handleOtpChange}\n                value={otp}\n                placeholder="Enter OTP"\n                keyboardType="numeric" // Set the keyboard type to numeric\n            />\n            <Button title="Submit" onPress={handleOtpSubmit} />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \'center\',\n        alignItems: \'center\',\n        padding: 20,\n    },\n    input: {\n        width: \'100%\',\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default OtpScreen;\n\nWrite a React Native component for the following screen:\n1. File Name: CompleteProfile.js\n2. Input Fields:\n2.1 email - string - non-editable (will be received as props from OtpScreen.js)\n2.2 Username - String\n2.3 First Name - String\n2.4 Last Name - String\n2.5 Gender - Dropdown with (Male, Female, Non-Binary)\n2.6 Date of Birth - Calendar dropdown\n2.7 About yourself - String\n2.8 Where do you stay?  - String\n\nAlso, modify the OtpScreen.js file so that email is being passed as props to the CompleteProfile screen.'

            response = 'First, let\'s modify the `CompleteProfile.js` component to include the required input fields and dropdowns as stated in your requirements. Then we\'ll ensure that the `email` prop is properly being passed from `OtpScreen.js` to `CompleteProfile.js`.\n\n### File: CompleteProfile.js\n```jsx\nimport React, { useState } from \'react\';\nimport { View, Text, TextInput, Button, StyleSheet, Picker } from \'react-native\';\nimport DatePicker from \'react-native-datepicker\';\n\nfunction CompleteProfile({ route }) {\n    const { email } = route.params;\n    const [username, setUsername] = useState(\'\');\n    const [firstName, setFirstName] = useState(\'\');\n    const [lastName, setLastName] = useState(\'\');\n    const [gender, setGender] = useState(\'Male\');\n    const [birthDate, setBirthDate] = useState(\'\');\n    const [about, setAbout] = useState(\'\');\n    const [location, setLocation] = useState(\'\');\n\n    const handleSubmit = async () => {\n        // Code to submit these details to your server\n        alert(\'Profile Updated\');\n    };\n\n    return (\n        <View style={styles.container}>\n            <Text>Email (non-editable): {email}</Text>\n            <TextInput\n                style={styles.input}\n                onChangeText={setUsername}\n                value={username}\n                placeholder="Username"\n            />\n            <TextInput\n                style={styles.input}\n                onChangeText={setFirstName}\n                value={firstName}\n                placeholder="First Name"\n            />\n            <TextInput\n                style={styles.input}\n                onChangeText={setLastName}\n                value={lastName}\n                placeholder="Last Name"\n            />\n            <Picker\n                selectedValue={gender}\n                style={styles.input}\n                onValueChange={(itemValue, itemIndex) => setGender(itemValue)}>\n                <Picker.Item label="Male" value="Male" />\n                <Picker.Item label="Female" value="Female" />\n                <Picker.Item label="Non-Binary" value="Non-Binary" />\n            </Picker>\n            <DatePicker\n                style={styles.input}\n                date={birthDate}\n                mode="date"\n                placeholder="Select date"\n                format="YYYY-MM-DD"\n                minDate="1900-01-01"\n                maxDate="2023-12-31"\n                confirmBtnText="Confirm"\n                cancelBtnText="Cancel"\n                customStyles={{\n                    dateIcon: {\n                        position: \'absolute\',\n                        left: 0,\n                        top: 4,\n                        marginLeft: 0\n                    },\n                    dateInput: {\n                        marginLeft: 36\n                    }\n                }}\n                onDateChange={(date) => setBirthDate(date)}\n            />\n            <TextInput\n                style={styles.textarea}\n                onChangeText={setAbout}\n                value={about}\n                placeholder="About yourself"\n                multiline\n            />\n            <TextInput\n                style={styles.input}\n                onChangeText={setLocation}\n                value={location}\n                placeholder="Where do you stay?"\n            />\n            <Button title="Submit" onPress={handleSubmit} />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        padding: 20,\n    },\n    input: {\n        width: \'100%\',\n        height: 40,\n        marginVertical: 10,\n        borderWidth: 1,\n        padding: 10,\n    },\n    textarea: {\n        width: \'100%\',\n        height: 100,\n        marginVertical: 10,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default CompleteProfile;\n```\n\n### Modification in OtpScreen.js\nYou have already correctly handled the navigation in `OtpScreen.js`. The `email` parameter is being passed as part of the navigation stack to `CompleteProfile` here:\n\n```jsx\nnavigation.reset({\n    index: 0,\n    routes: [{ name: \'CompleteProfile\', params: { email } }],\n});\n```\n\nThis is all you need to ensure that `email` is being properly passed to `CompleteProfile` via React Navigation. Make sure both components are correctly navigable via your app\'s navigation configuration, typically set up in a component using react-navigation (like StackNavigator).'
            