
            message = 'FastAPI Code:\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom pydantic import BaseModel\nfrom sqlalchemy.orm import Session\nimport sqlalchemy\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy import Column, String, Integer, create_engine\nimport random\n\n# Define the database connection (using SQLite in this case)\nDATABASE_URL = "sqlite:///./test_database.db"\nengine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Base class for models\nBase = declarative_base()\n\n\n# Define the User model\nclass User(Base):\n    __tablename__ = "users"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    otp = Column(Integer)\n\n\n# Create the database tables\nBase.metadata.create_all(bind=engine)\n\n\n# Pydantic model to accept user data\nclass UserIn(BaseModel):\n    email: str\n\n\n# FastAPI app\napp = FastAPI()\n\n\n# Dependency to get DB session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post("/login")\ndef login(user_in: UserIn, db: Session = Depends(get_db)):\n    try:\n        # Generate a random 4-digit OTP\n        otp = random.randint(1000, 9999)\n\n        # Create a new user instance\n        user = User(email=user_in.email, otp=otp)\n\n        # Add the user to the session and commit\n        db.add(user)\n        db.commit()\n\n        return {"message": "Success"}\n    except Exception as e:\n        # If anything goes wrong, rollback changes\n        db.rollback()\n        raise HTTPException(status_code=400, detail="Failure: " + str(e))\n\n\nif __name__ == "__main__":\n    import uvicorn\n\n    uvicorn.run(app, host="192.168.1.4", port=65535)\n\nReactNative OtpScreen Code:\nimport React, { useState } from \'react\';\nimport { View, TextInput, Button, StyleSheet } from \'react-native\';\n\nfunction OtpScreen() {\n    const [otp, setOtp] = useState(\'\');\n\n    const verifyOtp = () => {\n        // Handle OTP verification\n        alert(\'OTP Verified!\');\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.inputContainer}>\n                <TextInput\n                    style={styles.input}\n                    placeholder="OTP"\n                    value={otp}\n                    onChangeText={setOtp}\n                    keyboardType="numeric"\n                />\n                <Button title="Verify OTP" onPress={verifyOtp} />\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \'center\',\n        alignItems: \'center\',\n        padding: 20,\n    },\n    inputContainer: {\n        width: \'100%\',\n        maxWidth: 400,\n    },\n    input: {\n        marginBottom: 20,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default OtpScreen;\n\nLogin Screen React Native:\nimport React, { useState } from \'react\';\nimport { View, TextInput, Button, StyleSheet, Alert } from \'react-native\';\n\nfunction LoginScreen({ navigation }) {\n    const [email, setEmail] = useState(\'\');\n    const [loading, setLoading] = useState(false);\n\n    const isValidEmail = (email) => {\n        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return regex.test(email);\n    };\n\n    const handleLogin = async () => {\n        if (!email) {\n            Alert.alert("Validation Error", "Email field cannot be empty.");\n            return;\n        }\n\n        if (!isValidEmail(email)) {\n            Alert.alert("Validation Error", "Please enter a valid email address.");\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const response = await fetch(\'http://192.168.1.4:65535/login\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\',\n                },\n                body: JSON.stringify({ email }),\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                navigation.navigate(\'OTP\');\n            } else {\n                setLoading(false);\n                Alert.alert("Login Error", "Failed to log in. Please try again.");\n            }\n        } catch (error) {\n            setLoading(false);\n            Alert.alert("API Error", "An error occurred while trying to log in.");\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.inputContainer}>\n                <TextInput\n                    style={styles.input}\n                    placeholder="Email"\n                    value={email}\n                    onChangeText={setEmail}\n                    keyboardType="email-address"\n                    autoCapitalize="none"\n                />\n                <Button title={loading ? "Logging in..." : "Login"} onPress={handleLogin} disabled={loading} />\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \'center\',\n        alignItems: \'center\',\n        padding: 20,\n    },\n    inputContainer: {\n        width: \'100%\',\n        maxWidth: 400,\n    },\n    input: {\n        marginBottom: 20,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport default LoginScreen;\n\nMake changes in both OtpScreen and FAST API code.\nFor FAST API\n1. Write a new API, authenticate_otp that takes in the OTP and authenticates against the one present in the database wrt the email\n2. Returns success if it matches\n3. returns failure if it doesn\'t match\n\nFor ReactNative:\n1. Implement Post API call to the newly created fastapi API to pass the OTP along with the email id\n2. For this you will have to pass the email id from the login screen as well to the otp screen so that the otp screen can forward the email and the user input otp to the authenticate_otp API call in the request body\n3. if the otp is authenticated, if the API call returns success, then navigate to a blank example screen (give the code for this screen as well)\n4. if the otp is not authenticated, if the API call returns failure, then show alert'

            response = 'Let\'s start by updating the FastAPI backend, followed by the modifications in the React Native application to communicate with the newly created endpoints.\n\n### FastAPI Changes\n\nAdd a new API endpoint that verifies the OTP against the email:\n\n```python\nfrom sqlalchemy.orm import joinedload\n\n@app.post("/authenticate_otp")\ndef authenticate_otp(user_otp: dict, db: Session = Depends(get_db)):\n    email = user_otp.get("email")\n    otp = int(user_otp.get("otp"))\n    user = db.query(User).filter(User.email == email).first()\n    if user and user.otp == otp:\n        return {"message": "Success"}\n    else:\n        raise HTTPException(status_code=400, detail="Authentication failed")\n```\n\n### React Native Changes\n\n#### OtpScreen Updates\n\nPass the email from the LoginScreen to OtpScreen and implement the OTP verification:\n\nImport statements for navigation:\n```javascript\nimport { useNavigation } from \'@react-navigation/native\';\n```\n\nOtpScreen Code:\n```javascript\nfunction OtpScreen({ route }) {\n    const navigation = useNavigation();\n    const { email } = route.params;\n    const [otp, setOtp] = useState(\'\');\n\n    const verifyOtp = async () => {\n        try {\n            const response = await fetch(\'http://192.168.1.4:65535/authenticate_otp\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\',\n                },\n                body: JSON.stringify({ email, otp }),\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                navigation.navigate(\'ExampleScreen\');\n            } else {\n                alert(data.detail || "Failed to authenticate OTP.");\n            }\n        } catch (error) {\n            alert("Error connecting to the server.");\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.inputContainer}>\n                <TextInput\n                    style={styles.input}\n                    placeholder="OTP"\n                    value={otp}\n                    onChangeText={setOtp}\n                    keyboardType="numeric"\n                />\n                <Button title="Verify OTP" onPress={verifyOtp} />\n            </View>\n        </View>\n    );\n}\n```\n\n### ExampleScreen Code\n\nCreate a simple example screen as the final navigation target upon successful OTP verification:\n\n```javascript\n// ExampleScreen.js\nimport React from \'react\';\nimport { View, Text, StyleSheet } from \'react-native\';\n\nfunction ExampleScreen() {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>Welcome to the secured area!</Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \'center\',\n        alignItems: \'center\',\n    },\n    text: {\n        fontSize: 18,\n    },\n});\n\nexport default ExampleScreen;\n```\n\n### Update in LoginScreen\n\nNavigate to `OtpScreen` with the email parameter when the login is successful:\n\n```javascript\nif (response.ok) {\n    navigation.navigate(\'OTP\', { email });\n}\n```\n\n### Summary\n\nWith these changes:\n1. The FastAPI `authenticate_otp` endpoint handles OTP verification.\n2. React Native\'s `OtpScreen` sends the email and OTP to FastAPI for verification.\n3. Upon successful OTP verification, the user navigates to an `ExampleScreen`.'
            